from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, ContextTypes, MessageHandler, filters, ConversationHandler
import requests
from datetime import datetime

API_URL = "http://localhost:8001"
TOKEN = "7879703019:AAHgq3YSlU4wug2L0vC5aSf57XX5MvFfO_U"

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
REGISTER, EMAIL, PASSWORD = range(3)
# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –≤—Ö–æ–¥–∞
LOGIN_EMAIL, LOGIN_PASSWORD = range(3, 5)

async def start(update: Update, context):
    await update.message.reply_text(
        "üí∞ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π —Ç—Ä–µ–∫–µ—Ä\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/register - –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è\n"
        "/login - –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É\n"
        "/logout - –≤—ã–π—Ç–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã\n"
        "/add <—Å—É–º–º–∞> <–∫–∞—Ç–µ–≥–æ—Ä–∏—è> [–æ–ø–∏—Å–∞–Ω–∏–µ] [–¥–∞—Ç–∞] - –¥–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞—Ç—É\n"
        "/list - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ç—Ä–∞—Ç—ã\n"
        "/delete <id> - —É–¥–∞–ª–∏—Ç—å —Ç—Ä–∞—Ç—É\n"
    )

async def register(update: Update, context):
    await update.message.reply_text(
        "üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email:"
    )
    return EMAIL

async def get_email(update: Update, context):
    try:
        context.user_data['email'] = update.message.text
        await update.message.reply_text("–ü—Ä–∏–¥—É–º–∞–π—Ç–µ –ø–∞—Ä–æ–ª—å:")
        return PASSWORD
    except Exception as e:
        print("Error in get_email:", str(e))
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return ConversationHandler.END

async def get_password(update: Update, context):
    context.user_data['password'] = update.message.text
    email = context.user_data['email']
    password = context.user_data['password']
    user_id = str(update.message.from_user.id)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º ID Telegram –∫–∞–∫ username
    
    try:
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
        response = requests.post(
            f"{API_URL}/register",
            json={
                "email": email,
                "username": user_id,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º user_id –∫–∞–∫ username
                "password": password
            }
        )
        
        if response.status_code >= 400:
            error = response.json().get("detail", "Registration failed")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {error}")
            return ConversationHandler.END
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—Ö–æ–¥ –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        auth_response = requests.post(
            f"{API_URL}/token",
            data={
                "username": user_id,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º user_id –¥–ª—è –≤—Ö–æ–¥–∞
                "password": password
            }
        )
        
        if auth_response.status_code == 200:
            token = auth_response.json()["access_token"]
            context.user_data['token'] = token
            await update.message.reply_text("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏ –≤—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!")
        else:
            await update.message.reply_text(f"‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞, –Ω–æ –≤—Ö–æ–¥ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω. –û—à–∏–±–∫–∞: {auth_response.text}")
            
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    
    return ConversationHandler.END

async def login(update: Update, context):
    await update.message.reply_text("üîë –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É\n\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email:")
    return LOGIN_EMAIL

async def login_email(update: Update, context):
    context.user_data['login_email'] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å:")
    return LOGIN_PASSWORD

async def login_password(update: Update, context):
    password = update.message.text
    email = context.user_data['login_email']
    user_id = str(update.message.from_user.id)  # –ü–æ–ª—É—á–∞–µ–º user_id –∏–∑ Telegram
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º username (user_id) –ø–æ email
        user_info = requests.get(f"{API_URL}/user_by_email/{email}")
        if user_info.status_code != 200:
            await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return ConversationHandler.END
            
        username = user_info.json().get("username")
        
        # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        auth_response = requests.post(
            f"{API_URL}/token",
            data={
                "username": username,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º username (user_id)
                "password": password
            }
        )
        
        if auth_response.status_code == 200:
            token = auth_response.json()["access_token"]
            context.user_data['token'] = token
            await update.message.reply_text("‚úÖ –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        else:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å")
            
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    
    return ConversationHandler.END

async def logout(update: Update, context):
    if 'token' in context.user_data:
        del context.user_data['token']
        await update.message.reply_text("‚úÖ –í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã")
    else:
        await update.message.reply_text("‚ùå –í—ã –Ω–µ –≤–æ—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É")

async def cancel(update: Update, context):
    await update.message.reply_text("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
    return ConversationHandler.END

async def add_transaction(update: Update, context):
    if 'token' not in context.user_data:
        await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –≤—Ö–æ–¥ (/login)")
        return
    
    try:
        args = update.message.text.split()
        if len(args) < 3:
            await update.message.reply_text("‚ùå –§–æ—Ä–º–∞—Ç: /add <—Å—É–º–º–∞> <–∫–∞—Ç–µ–≥–æ—Ä–∏—è> [–æ–ø–∏—Å–∞–Ω–∏–µ] [–¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì]")
            return

        amount = float(args[1])
        category = args[2]
        
        description_parts = []
        date_str = None
        
        for arg in args[3:]:
            if '.' in arg and len(arg.split('.')) == 3:
                try:
                    datetime.strptime(arg, "%d.%m.%Y")
                    date_str = arg
                    break
                except ValueError:
                    pass
            description_parts.append(arg)
        
        date = datetime.strptime(date_str, "%d.%m.%Y").strftime("%Y-%m-%d") if date_str else datetime.now().strftime("%Y-%m-%d")
        description = " ".join(description_parts) if description_parts else None

        data = {
            "amount": amount,
            "category": category,
            "description": description,
            "date": date
        }
        
        response = requests.post(
            f"{API_URL}/transactions/",
            json=data,
            headers={"Authorization": f"Bearer {context.user_data['token']}"}
        )
        
        if response.status_code == 200:
            await update.message.reply_text(f"‚úÖ –¢—Ä–∞—Ç–∞ {amount}‚ÇΩ –Ω–∞ {category} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞! –î–∞—Ç–∞: {date}")
        else:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {response.text}")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

async def list_transactions(update: Update, context):
    if 'token' not in context.user_data:
        await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –≤—Ö–æ–¥ (/login)")
        return
    
    try:
        response = requests.get(
            f"{API_URL}/transactions/",
            headers={"Authorization": f"Bearer {context.user_data.get('token', '')}"}
        )
        
        if response.status_code != 200:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {response.text}")
            return
            
        transactions = response.json()
        
        if not transactions:
            await update.message.reply_text("üì≠ –°–ø–∏—Å–æ–∫ —Ç—Ä–∞—Ç –ø—É—Å—Ç")
            return
            
        message = "üìã –ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞—Ç (–Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É):\n\n"
        for tr in transactions:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–∞—Ç—ã
            tr_date = tr.get('date') or tr.get('transaction_date')
            if isinstance(tr_date, str):
                try:
                    tr_date = datetime.strptime(tr_date, "%Y-%m-%d").strftime("%d.%m.%Y")
                except ValueError:
                    tr_date = tr_date  # –û—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å
            
            message += (
                f"üÜî {tr.get('id', 'N/A')}\n"
                f"üìÖ {tr_date}\n"
                f"üí∞ {tr.get('amount', 0)} ‚ÇΩ - {tr.get('category', '–±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')}\n"
                f"üë§ –í–ª–∞–¥–µ–ª–µ—Ü: {tr.get('owner_id', tr.get('user_id', 'N/A'))}\n"
                f"üìù {tr.get('description', '–Ω–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}\n\n"
            )
        
        await update.message.reply_text(message)
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

async def delete_transaction(update: Update, context):
    if 'token' not in context.user_data:
        await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –≤—Ö–æ–¥ (/login)")
        return

    try:
        args = update.message.text.split()
        if len(args) < 2:
            await update.message.reply_text("‚ùå –§–æ—Ä–º–∞—Ç: /delete <id —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏>")
            return

        transaction_id = args[1]
        response = requests.delete(
            f"{API_URL}/transactions/{transaction_id}",
            headers={"Authorization": f"Bearer {context.user_data['token']}"}
        )
        
        if response.status_code == 200:
            await update.message.reply_text("‚úÖ –¢—Ä–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞")
        else:
            await update.message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç—Ä–∞—Ç—É. –û—à–∏–±–∫–∞: {response.text}")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

def run_bot():
    app = Application.builder().token(TOKEN).build()
    
    conv_handler = ConversationHandler(
        entry_points=[
            CommandHandler('register', register),
            CommandHandler('login', login)
        ],
        states={
            EMAIL: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_email)],
            PASSWORD: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_password)],
            LOGIN_EMAIL: [MessageHandler(filters.TEXT & ~filters.COMMAND, login_email)],
            LOGIN_PASSWORD: [MessageHandler(filters.TEXT & ~filters.COMMAND, login_password)],
        },
        fallbacks=[CommandHandler('cancel', cancel)]
    )
    
    app.add_handler(conv_handler)
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("logout", logout))
    app.add_handler(CommandHandler("add", add_transaction))
    app.add_handler(CommandHandler("list", list_transactions))
    app.add_handler(CommandHandler("delete", delete_transaction))
    
    app.run_polling()

if __name__ == "__main__":
    run_bot()