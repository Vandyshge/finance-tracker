from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
import requests
from datetime import datetime

API_URL = "http://localhost:8001"
TOKEN = "7879703019:AAHgq3YSlU4wug2L0vC5aSf57XX5MvFfO_U"

async def start(update: Update, context):
    await update.message.reply_text(
        "üí∞ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π —Ç—Ä–µ–∫–µ—Ä\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/add <—Å—É–º–º–∞> <–∫–∞—Ç–µ–≥–æ—Ä–∏—è> [–æ–ø–∏—Å–∞–Ω–∏–µ] [–¥–∞—Ç–∞] - –¥–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞—Ç—É\n"
        "/list - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ç—Ä–∞—Ç—ã\n"
    )

async def add_transaction(update: Update, context):
    try:
        args = update.message.text.split()
        if len(args) < 3:
            await update.message.reply_text("‚ùå –§–æ—Ä–º–∞—Ç: /add <—Å—É–º–º–∞> <–∫–∞—Ç–µ–≥–æ—Ä–∏—è> [–æ–ø–∏—Å–∞–Ω–∏–µ] [–¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì]")
            return

        amount = float(args[1])
        category = args[2]
        description = " ".join(args[3:-1]) if len(args) > 3 else None
        date_str = args[-1] if len(args) > 3 and "." in args[-1] else datetime.now().strftime("%d.%m.%Y")
        print(date_str)

        try:
            date = datetime.strptime(date_str, "%d.%m.%Y").strftime("%Y-%m-%d")
        except ValueError:
            date = datetime.now().strftime("%Y-%m-%d")
            description = " ".join(args[3:]) if len(args) > 3 else None
        print(date)

        data = {
            "amount": amount,
            "category": category,
            "description": description,
            "transaction_date": date
        }
        
        response = requests.post(f"{API_URL}/transactions/", json=data)
        await update.message.reply_text(f"‚úÖ –¢—Ä–∞—Ç–∞ {amount}‚ÇΩ –Ω–∞ {category} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

async def list_transactions(update: Update, context):
    try:
        response = requests.get(f"{API_URL}/transactions/")
        transactions = response.json()
        
        if not transactions:
            await update.message.reply_text("üì≠ –°–ø–∏—Å–æ–∫ —Ç—Ä–∞—Ç –ø—É—Å—Ç")
            return
            
        message = "üìã –ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞—Ç:\n\n"
        for idx, tr in enumerate(transactions, 1):
            date = datetime.strptime(tr['date'], "%Y-%m-%d").strftime("%d.%m.%Y")
            message += (
                f"{idx}. {tr['amount']} ‚ÇΩ - {tr['category']}\n"
                f"   –û–ø–∏—Å–∞–Ω–∏–µ: {tr.get('description', '–Ω–µ—Ç')}\n"
                f"   –î–∞—Ç–∞: {date}\n"
                f"   ID: {tr['id']}\n\n"
            )
        
        await update.message.reply_text(message)
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç—Ä–∞—Ç: {str(e)}")

def run_bot():
    app = Application.builder().token(TOKEN).build()
    
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("add", add_transaction))
    app.add_handler(CommandHandler("list", list_transactions))
    app.run_polling()

if __name__ == "__main__":
    run_bot()