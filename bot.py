from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
import requests
from datetime import datetime

API_URL = "http://localhost:8001"
TOKEN = "7879703019:AAHgq3YSlU4wug2L0vC5aSf57XX5MvFfO_U"

async def start(update: Update, context):
    await update.message.reply_text(
        "üí∞ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π —Ç—Ä–µ–∫–µ—Ä\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/add <—Å—É–º–º–∞> <–∫–∞—Ç–µ–≥–æ—Ä–∏—è> [–æ–ø–∏—Å–∞–Ω–∏–µ] [–¥–∞—Ç–∞] - –¥–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞—Ç—É\n"
        "/list - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ç—Ä–∞—Ç—ã\n"
        "/delete - —É–¥–∞–ª–∏—Ç—å —Ç—Ä–∞—Ç—É\n"
    )

async def add_transaction(update: Update, context):
    try:
        args = update.message.text.split()
        if len(args) < 3:
            await update.message.reply_text("‚ùå –§–æ—Ä–º–∞—Ç: /add <—Å—É–º–º–∞> <–∫–∞—Ç–µ–≥–æ—Ä–∏—è> [–æ–ø–∏—Å–∞–Ω–∏–µ] [–¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì]")
            return

        amount = float(args[1])
        category = args[2]
        
        # –ü–∞—Ä—Å–∏–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∞—Ä–≥—É–º–µ–Ω—Ç—ã
        description_parts = []
        date_str = None
        
        for arg in args[3:]:
            if '.' in arg and len(arg.split('.')) == 3:
                try:
                    datetime.strptime(arg, "%d.%m.%Y")
                    date_str = arg
                    break
                except ValueError:
                    pass
            description_parts.append(arg)
        
        date = datetime.strptime(date_str, "%d.%m.%Y").strftime("%Y-%m-%d") if date_str else datetime.now().strftime("%Y-%m-%d")
        description = " ".join(description_parts) if description_parts else None

        data = {
            "amount": amount,
            "category": category,
            "description": description,
            "transaction_date": date
        }
        
        response = requests.post(f"{API_URL}/transactions/", json=data)
        await update.message.reply_text(f"‚úÖ –¢—Ä–∞—Ç–∞ {amount}‚ÇΩ –Ω–∞ {category} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞! –î–∞—Ç–∞: {date}")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

async def list_transactions(update: Update, context):
    try:
        response = requests.get(f"{API_URL}/transactions/")
        transactions = response.json()
        
        if not transactions:
            await update.message.reply_text("üì≠ –°–ø–∏—Å–æ–∫ —Ç—Ä–∞—Ç –ø—É—Å—Ç")
            return
            
        message = "üìã –ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞—Ç:\n\n"
        for tr in transactions:
            tr_date = datetime.strptime(tr['date'], "%Y-%m-%d").strftime("%d.%m.%Y")
            message += (
                f"Id {tr['id']}\n"
                f"–°—É–º–º–∞ {tr['amount']} ‚ÇΩ - {tr['category']}\n"
                f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è {tr.get('description', '–Ω–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}\n"
                f"–î–∞—Ç–∞ {tr_date}\n\n"
            )
        
        await update.message.reply_text(message)
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç—Ä–∞—Ç: {str(e)}")

async def delete_transaction(update: Update, context):
    try:
        args = update.message.text.split()
        if len(args) < 2:
            await update.message.reply_text("‚ùå –§–æ—Ä–º–∞—Ç: /delete <id —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏>")
            return

        transaction_id = args[1]
        response = requests.delete(f"{API_URL}/transactions/{transaction_id}")
        
        if response.status_code == 200:
            await update.message.reply_text("‚úÖ –¢—Ä–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞")
        else:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç—Ä–∞—Ç—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ ID")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

def run_bot():
    app = Application.builder().token(TOKEN).build()
    
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("add", add_transaction))
    app.add_handler(CommandHandler("list", list_transactions))
    app.add_handler(CommandHandler("delete", delete_transaction))
    
    app.run_polling()

if __name__ == "__main__":
    run_bot()